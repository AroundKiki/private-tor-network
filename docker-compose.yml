version: '2.4'
services:
 da:
  image: cc/private-tor
  environment:
    ROLE: DA
  volumes:
    ## Needed to keep track of other nodes
    - ./tor:/tor
  # 可以使用scale调整，默认3
  scale: 3
 relay:
  image: cc/private-tor
  environment:
    ROLE: RELAY
  volumes:
    - ./tor:/tor
  depends_on:
    # Make sure the DA's are already up
    - da
  # container_name: relay
  scale: 3
 exit:
  image: cc/private-tor
  environment:
    ROLE: EXIT
  volumes:
    - ./tor:/tor
  depends_on:
    # Make sure the DA's are already up
    - da
  # container_name: exit
  scale: 3
 client:
  image: cc/private-tor
  ports:
    # Setups a listener on host machine
    - "9050:9050"
    - "9051:9051"
  volumes:
    - ./tor:/tor
  environment:
    ROLE: CLIENT
  depends_on: 
    - da
  # container_name: client
 hs:
  image: cc/private-tor
  environment:
    ROLE: HS
    # 将在hs节点的TOR_HS_PORT代理TOR_HS_ADDR:TOR_HS_PORT提供的服务
    #TOR_HS_ADDR可以是域名、IP或者是本文件中定义的service名，docker会将service名解析为ip，作用等同为域名。同service如有多个实例将随机访问一个
    TOR_HS_PORT: "80"
    TOR_HS_ADDR: "web"
  volumes:
    - ./tor:/tor
  depends_on:
    - da
  links:
    - web
 web:
  image: nginx
  # 普通ftp容器
 ftp:
  image: mikatux/ftps-server
  volumes:
    - ./data:/home/username
  environment:
    USER: username
  # ports:
    # - "4567:21"
    # - "3000-3010:3000-3010"
  scale: 0
 ddos:
  image: cc/private-tor
  environment:
    PARA: ${PARA}
    ROLE: DDOS
    # PYTHONUNBUFFERED: 1
  volumes:
    - ./tor:/tor
  depends_on:
    # Make sure the DA's are already up
    - da
  # container_name: exit
  scale: 1
  # 
  # backend为后端所需程序所在的容器
 backend:
  image: cc/private-tor
  ports:
    # Setups a listener on host machine
    - "5000:5000"
    - "80:80"
  environment:
    ROLE: BACKEND
  volumes:
    - ./tor:/tor
  depends_on:
    # Make sure the DA's are already up
    - da
  # container_name: exit
  scale: 1
